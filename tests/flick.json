{
  "packages": {
    "express": "3.4.4",
    "ejs": "0.8.5",
    "flickr": "0.1.0",
    "mongoose": "3.8.1"
  },
  "modules": {
    "custom": {
      "custom.txt": "this is custom code\n"
    }
  },
  "models": [
    {
      "generate": "models.model",
      "data": {
        "name": "Picture",
        "fields": [
          {
            "name": "datePicked",
            "type": "Date"
          },
          {
            "name": "name",
            "type": "String"
          },
          {
            "name": "url",
            "type": "String"
          }
        ],
        "functions": [
          {
            "name": "randomNFromFlickr",
            "enableAPI": true,
            "code": "function (searchQ, limit, cb) {\n      var flickr = require('flickr');\n      var fcli = new flickr.Flickr('cbe3f7f6cbf9d13ad243a1e1afec902d', '5c3f9a33e088ef60');\n      fcli.executeAPIRequest('flickr.photos.search', {text: searchQ, per_page: limit, extras: ['url_q']},\n                               false, function(e, d){cb(e, d);});\n    }"
          },
          {
            "name": "updateUrl",
            "instancemethod": true,
            "code": "function (newUrl, cb) {\n      this.url = newUrl;\n      this.save(function(e, d){cb(e,d);});\n    }"
          },
          {
            "name": "updateUrl",
            "enableAPI": true,
            "code": "function (pic, newUrl, callback, _req, _res) {\n      if (_req.query.test === 'true') {\n          _res.send('pristine');\n      } else {\n          this.findOne({id:pic.id}, function(err, pic){\n              pic.updateUrl(newUrl, function(e, d) {\n                 callback(e, d);\n              });\n          });\n      }\n    }"
          },
          {
            "generate": "crud.models.create",
            "data": {
              "modelName": "Picture",
              "enableAPI": true
            }
          },
          {
            "generate": "crud.models.find",
            "data": {
              "modelName": "Picture",
              "enableAPI": true
            }
          }
        ]
      }
    },
    {
      "generate": "models.model",
      "data": {
        "name": "User",
        "fields": [
          {
            "name": "name",
            "type": "String"
          },
          {
            "name": "email",
            "type": "String"
          },
          {
            "name": "username",
            "type": "String"
          },
          {
            "name": "hashed_password",
            "type": "String"
          },
          {
            "name": "salt",
            "type": "String"
          }
        ],
        "functions": [
          {
            "name": "authenticate",
            "code": "function (plainText) {\n  /**\n   * Authenticate by checking the hashed password and provided password\n   *\n   * @param {String} plainText\n   * @return {Boolean}\n   * @api private\n   */\n    return user.encryptPassword(plainText) === user.hashed_password;\n  }"
          },
          {
            "name": "makeSalt",
            "code": "function () {\n  /**\n   * Create password salt\n   *\n   * @return {String}\n   * @api private\n   */\n\n    /* Then to regenerate password, use:\n        user.salt = user.makeSalt()\n        user.hashed_password = user.encryptPassword(password)\n    */\n    return Math.round((new Date().valueOf() * Math.random())) + '';\n  }"
          },
          {
            "name": "encryptPassword",
            "code": "function (password) {\n  /**\n   * Encrypt password\n   *\n   * @param {String} password\n   * @return {String}\n   * @api private\n   */\n    var crypto = require('crypto');\n    if (!password) return '';\n    return crypto.createHmac('sha1', user.salt).update(password).digest('hex');\n  }"
          },
          {
            "name": "resetToken",
            "code": "function (token, cb) {\n  /**\n   * Reset auth token\n   *\n   * @param {String} token\n   * @param {Function} cb\n   * @api private\n   */\n    var self = user;\n    var crypto = require('crypto');\n    crypto.randomBytes(48, function(ex, buf) {\n      self[token] = buf.toString('hex');\n      if (cb) cb();\n    });\n  }"
          },
          {
            "name": "signup",
            "enableAPI": true,
            "code": "function (username, password, password2, callback) {\n        if (password !== password2) {\n            callback('Passwords don\\'t match. Please try again.');\n        }\n        var user = new this({username: username});\n        user.salt = user.makeSalt();\n        user.hashed_password = user.encryptPassword(password);\n        user.save(function(err, data) {\n            if (err) {\n                callback(err);\n            } else {\n                callback(null, {url:'?success=true'});\n            }\n        });\n    }"
          }
        ],
        "schemaMods": [
          "function (schema) {\n  schema.path('name').validate(function (name) {\n    return name.trim().length > 0;\n  }, 'Please provide a valid name');\n}",
          "function (schema) {\n  schema.path('email').validate(function (email) {\n    return email.trim().length > 0;\n  }, 'Please provide a valid email');\n}",
          "function (schema) {\n  schema.path('hashed_password').validate(function (hashed_password) {\n    return hashed_password.length > 0;\n  }, 'Please provide a password');\n}"
        ]
      }
    }
  ],
  "templates": [
    {
      "generate": "templates.page",
      "data": {
        "name": "Homepage",
        "head": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.2/underscore-min.js\"></script>\n<script src=\"http://127.0.0.1:3000/client/app/scripts/browser-expander.js\"></script>\n<script src=\"http://127.0.0.1:3000/client/app/scripts/generator.js\"></script>\n<script>var G = new Generator();</script>",
        "navbar": "",
        "footer": "",
        "uielements": {
          "generate": "templates.concatUIE",
          "data": [
            {
              "generate": "uielements.node",
              "data": {
                "isSingle": false,
                "tagName": "h1",
                "content": "Search Flickr"
              }
            },
            {
              "generate": "flickrpickr.uielements.flicksearchbar",
              "data": {
                "galleryID": "myflickgallery",
                "searchID": "myflicksearch",
                "buttonText": "Hit the backend!"
              }
            },
            {
              "generate": "flickrpickr.uielements.flickgallery",
              "data": {
                "galleryID": "myflickgallery"
              }
            },
            {
              "html": "<h1>Create a Picture</h1>",
              "js": "",
              "css": ""
            },
            {
              "generate": "crud.uielements.create",
              "data": {
                "fields": [
                  {
                    "generate": "crud.uielements.form-field",
                    "data": {
                      "displayType": "single-line-text",
                      "field_name": "name",
                      "placeholder": "Name"
                    }
                  },
                  {
                    "generate": "crud.uielements.form-field",
                    "data": {
                      "displayType": "single-line-text",
                      "field_name": "url",
                      "placeholder": "URL"
                    }
                  }
                ],
                "id": "testform",
                "redirect": "/?success=true"
              }
            },
            {
              "html": "<div id=\"piclist\"></div>",
              "js": "models.Picture.findPicture({}, function(err, data){\n_.each(data, function(d) {var hString = G.generate('uielements.design-header', {content:d.name}).html;$('#piclist').append(hString+'<img class=\"piclist\" src=\"'+d.url+'\">'); });\n});",
              "css": "img.piclist {max-height: 200px; max-width: 300px;}"
            },
            {
              "html": "<h1>Sign Up</h1>\n<form id=\"signup\">\n<input name=\"username\" type=\"text\" placeholder=\"Username\"><br>\n<input name=\"password\" type=\"password\" placeholder=\"Password\"><br>\n<input name=\"password2\" type=\"password\" placeholder=\"Confirm password\"><br>\n<input type=\"submit\" value=\"Submit\">\n</form>",
              "js": "$('#signup').submit(function(){\n    var username = $('#signup input[name=\"username\"]').val();\n    var password = $('#signup input[name=\"password\"]').val();\n    var password2 = $('#signup input[name=\"password2\"]').val();\n    models.User.signup(username, password, password2, function(err, data){\n        if (err) { alert(err); }\n        else { location.href = data.url; }\n        \n    });\n    return false;\n});",
              "css": ""
            },
            {
              "html": "<h1>Login</h1>",
              "js": "",
              "css": ""
            }
          ]
        }
      }
    },
    {
      "generate": "templates.page",
      "data": {
        "name": "RandFlickr",
        "head": "<script src=\"//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.5.2/underscore-min.js\"></script>\n<script src=\"http://127.0.0.1:3000/client/app/scripts/browser-expander.js\"></script>\n<script src=\"http://127.0.0.1:3000/client/app/scripts/generator.js\"></script>\n<script>var G = new Generator();</script>",
        "navbar": "",
        "footer": "",
        "uielements": {
          "generate": "templates.concatUIE",
          "data": [
            {
              "generate": "flickrpickr.uielements.flickgallery",
              "data": {
                "galleryID": "myflickgallery"
              }
            },
            {
              "html": "<div id=\"piclist\"></div>",
              "js": "function renderInList (e, d) {\n  if (e) alert(e);\n  else {\n    for (var i = 0; i < d.photos.photo.length; i ++) {\n      var photo = d.photos.photo[i];\n      $('#myflickgallery').append('<img src=\"'+photo.url_q+'\">');\n    }\n  }\n}\n$('document').ready(function() {\n    var query = window.location.pathname.split( '/' )[2];\n    var limit = window.location.pathname.split( '/' )[3];\n    models.Picture.randomNFromFlickr(query, limit, renderInList);\n    return false;\n});",
              "css": "img.piclist {max-height: 200px; max-width: 300px;}"
            }
          ]
        }
      }
    }
  ],
  "routes": [
    {
      "generate": "routes.staticpage",
      "data": {
        "url": [
          ""
        ],
        "name": "Homepage"
      }
    },
    {
      "generate": "routes.staticpage",
      "data": {
        "url": [
          "randomFlickr",
          ":query",
          ":limit"
        ],
        "name": "RandFlickr"
      }
    }
  ],
  "generators": {
    "flickrpickr": {
      "uielements": [
        {
          "name": "flicksearchbar",
          "version": "0.1",
          "code": "function (data, templates){\n        // buttonText, searchID, galleryID\n        var uie = {\n            html: templates.html(data),\n            css: '',\n            js: templates.js(data)\n        };\n        return uie;\n    }",
          "templates": {
            "html": "<form id=\"<%= searchID %>\">\n<input type=\"text\" name=\"q\">\n<input type=\"submit\" value=\"<%= buttonText %>\">\n</form>",
            "js": "function renderInList (e, d) {    if (e) alert(e);    else {        for (var i = 0; i < d.photos.photo.length; i ++) {            var photo = d.photos.photo[i];            $('#<%= galleryID %>').append('<img src=\"'+photo.url_q+'\">');        }    }}$('#<%= searchID %>').submit(function() {    var formData = $('#<%= searchID %>').serializeArray();    models.Picture.randomNFromFlickr(formData[0].value, 10, renderInList);    return false;});"
          }
        },
        {
          "name": "flickgallery",
          "version": "0.1",
          "code": "function (data, templates){\n        // galleryID\n        var uie = {\n            html:'<div id=\"'+data.galleryID+'\"></div>',\n            css: '',\n            js: ''\n        };\n        return uie;\n    }",
          "templates": {}
        }
      ]
    }
  },
  "config": {
    "generate": "app.config",
    "data": {
      "customCodeChunks": []
    }
  },
  "css": "body {\n    a {\n        font-family: Arial, Helvetica, sans-serif;\n    }\n}\n"
}